const { ButtonBuilder } = require('discord.js');

module.exports = {
  interaction: {
    name: "atla",
    description: "Anlƒ±k √ßalan ≈üarkƒ±yƒ± atlar, sonraki ≈üarkƒ±ya ge√ßer.",
    options: []
  },
  aliases: ['sk', "skip"],
  category: "Music",
  memberPermissions: [],
  botPermissions: ["SendMessages", "EmbedLinks"],
  nsfw: false,
  cooldown: 3000,
  ownerOnly: false,

  async execute(client, interaction, data) {

    if (!interaction.member.voice.channel)
      return interaction.reply({
        embeds: [{
          color: client.settings.embedColors.red,
          description: "**¬ª** Bir odada deƒüilsin. Herhangi bir odaya ge√ß ve tekrar dene!"
        }]
      });

    if (interaction.guild.members.me.voice.channel && interaction.member.voice.channel.id !== interaction.guild.members.me.voice.channel.id)
      return interaction.reply({
        embeds: [{
          color: client.settings.embedColors.red,
          description: "**¬ª** Aynƒ± odada deƒüiliz! Bulunduƒüum odaya katƒ±l ve tekrar dene!"
        }]
      });

    const queue = client.distube.getQueue(interaction.guild);

    if (!queue || !queue.songs || queue.songs.length == 0)
      return interaction.reply({
        embeds: [{
          color: client.settings.embedColors.red,
          description: "**¬ª** ≈ûu anda bir ≈üarkƒ± √ßalmƒ±yor."
        }]
      });

    const guildDataCache = client.guildDataCache[interaction.guild.id] || (client.guildDataCache[interaction.guild.id] = {});
    if (guildDataCache?.games?.musicQuiz || queue.songs[0].metadata.isMusicQuiz)
      return interaction.reply({
        embeds: [{
          color: client.settings.embedColors.red,
          description:
            "**¬ª** M√ºzik tahmini oyunu sƒ±rasƒ±nda bu komutu kullanamazsƒ±n.\n" +
            "**‚Ä¢** 60 saniye i√ßerisinde doƒüru tahmin yapƒ±lmazsa zaten otomatik atlanƒ±r."
        }]
      });

    try {

      await queue.skip();

      return interaction.reply({
        embeds: [{
          color: client.settings.embedColors.green,
          description: "**¬ª** ≈ûu anda √ßalan ≈üarkƒ± atlandƒ±. Bir sonraki ≈üarkƒ±ya ge√ßiliyor..."
        }]
      });

    } catch (error) {

      if (error.errorCode === "NO_UP_NEXT") {

        /* return interaction.reply({
          embeds: [{
            color: client.settings.embedColors.red,
            title: "**¬ª** Sƒ±rada Bir ≈ûarkƒ± Yok Ki!",
            description: "**‚Ä¢** Tabii `/bitir` yazarsan burayƒ± terk edebilirim ü•∫"
          }]
        }); */

        const { buttonConfirmation } = require("../../modules/Functions");
        const buttonConfirmationResult = await buttonConfirmation(
          interaction,
          [
            {
              color: client.settings.embedColors.default,
              title: "**¬ª** Sƒ±rada Bir ≈ûarkƒ± Yok Ki!",
              description: "**‚Ä¢** Oynatma bitirilsin mi?"
            }
          ]
        );

        if (interaction.type === 2 ? !buttonConfirmationResult : !buttonConfirmationResult.status) {
          let messageContent = {
            embeds: [
              {
                color: client.settings.embedColors.red,
                description: "**‚Ä¢** Hi√ßbir eylem yapmadƒ±m."
              }
            ],
            components: []
          };

          if (interaction.type === 2)
            return interaction.editReply(messageContent).catch(error => { });
          else return buttonConfirmationResult.reply?.edit(messageContent).catch(error => { });
        }

        queue.stop();

        let messageContent = {
          embeds: [{
            color: client.settings.embedColors.default,
            title: "**¬ª** Oynatma Sonlandƒ±rƒ±ldƒ±!",
            description: `**‚Ä¢** ≈ûarkƒ± sƒ±rasƒ± temizlendi ve oynatma bitirildi.`
          }],
          components: []
        };

        if (interaction.type === 2)
          return interaction.editReply(messageContent).catch(error => { });
        else return buttonConfirmationResult.reply?.edit(messageContent).catch(error => { });

      } else {

        client.logger.error(error);
        return interaction.reply({
          embeds: [{
            color: client.settings.embedColors.red,
            title: "**¬ª** Bir Hata Olu≈ütu!",
            description:
              `**‚Ä¢** Hatayla ilgili geli≈ütirici bilgilendirildi.\n` +
              `**‚Ä¢** En kƒ±sa s√ºrede √ß√∂z√ºlecektir.`
          }],
          components: [
            {
              type: 1, components: [
                new ButtonBuilder().setLabel('Destek Sunucusu').setURL("https://discord.gg/VppTU9h").setStyle('Link')
              ]
            },
          ]
        });

      }

    }

  },
};